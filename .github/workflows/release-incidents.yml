name: Publish Drone-Incident Release

# Trigger only when the monitor workflow finishes successfully
on:
  workflow_run:
    workflows: ["Drone Incident Monitor"]   # ← must match `name:` in monitor.yml
    types: [completed]

jobs:
  publish-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the repo at the commit SHA that triggered this workflow_run
      - name: Checkout generated commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2) Read the outputs file produced by monitor job
      - name: Read monitor outputs
        id: parse
        run: |
          OUT_FILE=".github/outputs/monitor_output.txt"
          # The monitor job wrote its outputs to $GITHUB_OUTPUT; we committed it
          # into the repo (optional) OR we can fetch it via artifacts.
          # Simpler: rebuild from incidents.json metadata
          python - <<'PY'
          import json, os, sys, textwrap, pathlib, datetime
          data = json.load(open("data/incidents.json"))
          print(f"incident_count={data['total_count']}")
          PY

      # 3) Exit early if no new release_notes file was created
      - name: Check for release_notes
        id: notes
        run: |
          if ! grep -q '^release_notes<<EOF' .github/outputs/monitor_output.txt; then
            echo "no_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "no_release=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if nothing to publish
        if: steps.notes.outputs.no_release == 'true'
        run: echo "No new incidents – skipping release."

      # 4) Extract release-notes, tag & date
      - name: Prepare metadata
        id: meta
        if: steps.notes.outputs.no_release == 'false'
        run: |
          ts=$(grep '^timestamp=' .github/outputs/monitor_output.txt | cut -d= -f2)
          date=$(grep '^date=' .github/outputs/monitor_output.txt | cut -d= -f2-)
          notes=$(sed -n '/^release_notes<<EOF$/,/^EOF$/p' .github/outputs/monitor_output.txt | sed '1d;$d')
          echo "tag=incidents-${ts}"      >> "$GITHUB_OUTPUT"
          echo "date=${date}"             >> "$GITHUB_OUTPUT"
          echo "notes<<EOF"               >> "$GITHUB_OUTPUT"
          echo "${notes}"                 >> "$GITHUB_OUTPUT"
          echo "EOF"                      >> "$GITHUB_OUTPUT"

      # 5) Create the release
      - name: Create GitHub release
        if: steps.notes.outputs.no_release == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:   ${{ steps.meta.outputs.tag }}
          release_name: "Drone Incidents Update – ${{ steps.meta.outputs.date }}"
          body: |
            ## New Drone Incidents Detected
            
            ${{ steps.meta.outputs.notes }}
            
            View full details in [incidents.json](data/incidents.json)
          draft: false
          prerelease: false
